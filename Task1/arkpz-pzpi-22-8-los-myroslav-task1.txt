МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Лабораторної роботи № 1
з дисципліни
«Аналіз та рефакторинг коду»


Виконав: 
ст. гр. ПЗПІ-22-8
Лось М.О.

Перевірив: 
ст. викладач каф. ПІ 
Сокорчук І.П.



Харків 2024


Концепція та рамки проекту
для
Програмна система для моніторингу шуму в місті 
       NoiseControl
Версія 1.0
Підготовлено ст. гр. ПЗПІ-22-8 Лось М. О.
Харківський Національний Університет Радіоелектроніки
9.11.2024 
Зміст

Зміст	3
Історія змін	3
1.	Бізнес-вимоги	4
      1.1.	Передумови	4
      1.2.	Бізнес-можливості	5
2.	Концепція рішення	7
      2.1.	Окреслення концепції	7
      2.2.	Головна функціональність	8
3.	Рамки та обмеження	10
      3.1.	Рамки первинного запуску	10
      3.2.	Рамки наступних випусків	12
4.	Бізнес-контекст	14
      4.3.	Робоче середовище	14




Історія змін


Ім’я	Дата	Привід змін	Версія
Лось М. О.	9.11.2024		1.0
			
 
1 БІЗНЕС-ВИМОГИ
1.1	Передумови
Сучасні міста стикаються з постійним зростанням шумового забруднення, яке негативно впливає на здоров’я людей і комфорт проживання. Рівень шуму в багатьох зонах перевищує встановлені норми, що створює виклики для місцевої влади та громад. Шум може спричиняти стрес, знижувати продуктивність, впливати на психічне та фізичне здоров’я, особливо у густонаселених районах.
Ідея створення цієї системи полягає в автоматизації процесів моніторингу шуму у міських зонах. Завдяки системі можна буде оперативно виявляти проблемні ділянки, аналізувати дані та вживати необхідних заходів для зниження шуму.
Основна мета розробки — створення інструменту, який дозволить муніципальним службам і зацікавленим організаціям ефективно контролювати шумове забруднення, своєчасно реагувати на перевищення рівнів шуму та зменшувати його вплив на жителів. Також система стане корисною для наукових та освітніх установ, надаючи зручний доступ до даних для аналізу і досліджень.
Програмний продукт покликаний оптимізувати витрати на моніторинг, підвищити точність збору даних та забезпечити можливість інтеграції з іншими міськими системами. Система буде легко масштабованою для роботи в містах різного розміру та з різним рівнем технічної інфраструктури.
У підсумку, рішення сприятиме покращенню якості міського середовища, зниженню рівня шуму та забезпеченню комфортного життя для мешканців. 
1.2	Бізнес-можливості
Програмна система орієнтована на ринок міського моніторингу шумового забруднення, комерційних об’єктів, наукових установ, екологічних служб та державних організацій. Ринок автоматизованих систем збору та аналізу шуму є перспективним через активну інтеграцію IoT-рішень у сферу міського планування та екологічного контролю. Оглянемо подібні системи та порівняємо їх з нашою:
1) NoiseCapture — це додаток, який дозволяє користувачам збирати дані про рівень шуму через смартфони. Зібрана інформація зберігається у відкритій базі даних, яка використовується для досліджень та моніторингу шумового забруднення.
Переваги:
	простота у використанні;
	відкритий доступ до даних;
	залучення громадськості до моніторингу шуму.
Недоліки:
	залежність від мобільних пристроїв користувачів;
	низька точність даних через обмеження мікрофонів смартфонів;
	відсутність автоматизованої обробки даних у реальному часі.
2) SONYC (Sounds of New York City) — це система моніторингу, що використовує IoT-сенсори для збору даних про шумове забруднення у міських умовах. Вона спрямована на допомогу міським службам у прийнятті рішень.
Переваги:
	використання спеціалізованих датчиків для високої точності;
	інтеграція з системами міського управління;
 
	можливість аналізу даних у реальному часі.
Недоліки:
	висока вартість впровадження;
	складність масштабування для невеликих міст;
	залежність від постійного підключення до інтернету.
3) Noisemap — система, що дозволяє створювати інтерактивні карти шумового забруднення. Вона використовує дані, отримані від користувачів та сторонніх пристроїв.
Переваги:
	простий у використанні інтерфейс;
	візуалізація даних на карті;
	можливість інтеграції з GIS-системами.
Недоліки:
	обмежена кількість сенсорів;
	відсутність автономної роботи;
	невисока точність через залежність від даних користувачів.  
Основна перевага нашого продукту — це його здатність автоматично здійснювати моніторинг рівня шуму в міських умовах, оперативно реагувати на перевищення допустимих норм та надавати користувачам зрозумілу аналітику.
Система розроблена для масштабування, що дозволяє використовувати її як у невеликих містечках, так і у великих мегаполісах, враховуючи специфічні потреби кожного середовища.
Економічна доступність продукту забезпечує його привабливість для муніципальних служб та організацій з обмеженим бюджетом, при цьому основна функціональність залишається на високому рівні. Інтеграція із сучасними IoT-рішеннями за допомогою відкритих стандартів, таких як MQTT, дозволяє легко поєднувати систему з іншими технологіями, що вже використовуються у місті.
Система не залежить від постійного доступу до хмарних сервісів, що робить її стабільною навіть у разі перебоїв з інтернетом. Це особливо корисно для віддалених територій або ситуацій, коли локальна обробка даних є пріоритетною. Ми зосереджені на створенні гнучких і зрозумілих рішень, які максимально адаптуються до потреб користувача.
Таким чином, наш продукт стає ідеальним вибором для органів місцевого самоврядування, екологічних організацій та дослідницьких установ, які прагнуть контролювати шумове забруднення та підтримувати комфортне середовище для мешканців.

2 КОНЦЕПЦІЯ РІШЕННЯ
2.1	Окреслення концепції
Дана програмна система — це комплексне рішення, яке поєднує автоматизований моніторинг, аналіз даних та оперативне сповіщення для контролю шумового забруднення в міських умовах.
Система розроблена для задоволення потреб органів місцевого самоврядування, екологічних організацій, дослідницьких центрів та громадських ініціатив, що прагнуть забезпечити комфортне та безпечне акустичне середовище для мешканців міста.
Основне призначення системи полягає у забезпеченні стабільного контролю шумового середовища через автоматизацію процесів, які раніше вимагали значного людського втручання.
Система забезпечує постійний моніторинг рівня шуму у ключових точках міста за допомогою IoT-датчиків. У разі перевищення встановлених норм система автоматично надсилає сповіщення відповідним службам для вжиття заходів.
Зручний веб-інтерфейс дозволяє візуалізувати поточний рівень шуму в режимі реального часу, аналізувати історичні дані, налаштовувати сповіщення та автоматичні сценарії реагування.
Система підтримує стандартні IoT-протоколи, такі як MQTT, що забезпечує легку інтеграцію з існуючими або новими пристроями та сенсорами. Її масштабованість дозволяє адаптувати рішення як для невеликих міських громад, так і для мегаполісів із розвиненою інфраструктурою.
Цей продукт сприяє не лише покращенню якості життя мешканців міста, але й оптимізації роботи муніципальних служб, знижуючи витрати на контроль шумового забруднення та забезпечуючи ефективне використання ресурсів.
Таким чином, програмна система для моніторингу шуму є сучасним інструментом, що поєднує технологічний прогрес, екологічну відповідальність та економічну ефективність, створюючи нові можливості для вдосконалення управління акустичним середовищем у містах.
2.2	Головна функціональність
MF-1. Автоматичний моніторинг рівня шуму
Система постійно моніторить рівень шуму у міських зонах за допомогою IoT-сенсорів, встановлених у ключових місцях.
MF-2. Автоматичне сповіщення про перевищення норм
При виявленні перевищення допустимого рівня шуму система автоматично надсилає повідомлення відповідним службам для оперативного реагування.
MF-3. Інтеграція з IoT-пристроями
Система використовує IoT-пристрої (наприклад, ESP32) для збирання даних із сенсорів та передачі їх на сервер для подальшої обробки.
MF-4. Візуалізація даних на веб-інтерфейсі
Рівень шуму в реальному часі та історичні дані відображаються у зручному веб-інтерфейсі, що дозволяє користувачам аналізувати ситуацію та виявляти проблемні зони.
MF-5. Ведення журналу даних
Система зберігає всі зібрані дані у базі даних для створення історичних звітів, аналізу тенденцій та прийняття управлінських рішень.
MF-6. Інтерактивний REST API
Система надає REST API, який дозволяє стороннім додаткам отримувати доступ до даних, взаємодіяти з системою та інтегрувати її у сторонні платформи.
MF-7. Інтеграція з публічним MQTT-брокером
Система використовує публічний MQTT-брокер для передачі даних у реальному часі. Це дозволяє спростити інтеграцію з іншими системами без необхідності налаштування власного серверного середовища.
MF-8. Автоматичне оновлення бази даних
Система регулярно оновлює базу даних новими показниками від сенсорів, забезпечуючи точність інформації для аналізу та звітності.
MF-9. Повідомлення у реальному часі
Користувачі отримують повідомлення через MQTT-протокол про перевищення допустимих норм шуму або технічні несправності в системі.
MF-10. Гнучка архітектура
Система побудована на основі сучасних технологій, таких як Node.js та MQTT, що дозволяє легко масштабувати її, додавати нові сенсори та функціонал без значних змін у коді.

3 РАМКИ ТА ОБМЕЖЕННЯ
3.1	Рамки первинного продукту
Перший випуск програмної системи забезпечить ключову функціональність, необхідну для стабільного моніторингу рівня шуму, автоматизації аналізу даних та сповіщення про перевищення допустимих норм.
Основна мета цієї системи — створення базової версії, яка дозволить муніципальним службам та іншим зацікавленим організаціям ефективно відстежувати рівень шуму в режимі реального часу, аналізувати дані та оперативно реагувати на порушення. Система надасть зручний веб-інтерфейс для візуалізації показників шуму, а також забезпечить автоматичну передачу сповіщень відповідним службам у разі перевищення граничних значень.
Система включає кілька основних функціональних компонентів. Моніторинг шуму здійснюється через IoT-сенсори, які передають дані на сервер через MQTT-протокол. У разі виявлення перевищення рівня шуму система автоматично генерує сповіщення та реєструє цю подію у базі даних. 
Всі дані відображаються у веб-інтерфейсі, а також зберігаються для подальшого аналізу через REST API.
Серверна частина системи реалізована на базі Node.js і Express.js. Вона обробляє отримані дані, зберігає їх у базі даних MySQL та забезпечує логіку сповіщень і інтеграції через MQTT. REST API надає можливість взаємодії з іншими системами або клієнтами, включаючи веб-інтерфейси та мобільні додатки. Для забезпечення безпеки даних реалізована авторизація користувачів, шифрування паролів та обмеження доступу.
IoT-пристрій на базі ESP32 відповідає за збір даних із шумових сенсорів та їх передачу на сервер. Додатково пристрій може надавати індикацію стану (наприклад, перевищення норм) через світлодіоди або OLED-дисплей.
База даних системи складається з кількох таблиць, які зберігають інформацію про користувачів, сенсори, журнали подій та історичні дані. Це дозволяє аналізувати історію змін шумових показників і приймати відповідні рішення на основі отриманої аналітики.
Бізнес-логіка системи включає кілька ключових процесів. IoT-пристрій регулярно зчитує дані з шумових сенсорів і надсилає їх на сервер. Сервер аналізує ці дані на відповідність встановленим нормам. У разі перевищення рівня шуму система автоматично надсилає сповіщення відповідним службам та реєструє цю подію у журналі. Адміністратор може керувати сенсорами, коригувати допустимі межі шуму та переглядати аналітику через REST API.
Система також передбачає захист даних. Всі дані користувачів зберігаються у зашифрованому вигляді, а доступ до API обмежений авторизацією. Масштабованість дозволяє додавати нові сенсори та функціональні можливості без значних змін у структурі системи.
У першій версії система забезпечує основну функціональність, необхідну для ефективного моніторингу та управління шумовим середовищем, включаючи автоматичне сповіщення, реєстрацію змін у логах та інтеграцію з іншими системами. Це стане основою для подальшого розвитку та вдосконалення можливостей системи NoiseMonitor.

3.2	Рамки наступних випусків
Подальший розвиток системи зосереджуватиметься на вдосконаленні функціональності, розширенні можливостей моніторингу та підвищенні зручності для користувачів. Особливу увагу буде приділено інтеграції з іншими платформами та створенню мобільного додатка.
Реалізація веб-інтерфейсу для управління та аналізу:
	перегляд актуальних даних про рівень шуму в реальному часі;
	налаштування індивідуальних порогових значень для сенсорів;
	перегляд архівних даних у вигляді графіків;
	ручне керування сенсорами та іншими пристроями;
	інтеграція з REST API для доступу до даних і управління системою.
Розширення функціональності логування:
	автоматичний експорт журналів подій у форматах CSV або Excel (.xlsx) для подальшого аналізу;
	автоматична генерація звітів із ключовими показниками, які надсилатимуться електронною поштою за обраний період.
Додаткові сенсори:
	інтеграція нових типів сенсорів, таких як вібраційні або ультразвукові сенсори;
	відображення нових параметрів у веб-інтерфейсі для більш детального аналізу.


Удосконалення алгоритмів обробки даних:
	впровадження алгоритмів для виявлення шумових аномалій та прогнозування пікових значень;
	оптимізація передачі даних для підвищення енергоефективності сенсорів.
Підтримка кількох зон:
	одночасний моніторинг рівня шуму в різних районах міста;
	чітке розмежування даних за кожною зоною для зручності аналізу.
Реалізація мобільного додатка для користувачів:
	перегляд показників шуму у реальному часі;
	отримання сповіщень про перевищення встановлених норм;
	дистанційне налаштування параметрів сенсорів;
	доступ до історичних даних і звітів через мобільний інтерфейс.
Метою наступних версій є створення максимально зручного та інтерактивного продукту, який дозволить користувачам отримувати точні дані, гнучко керувати системою та інтегрувати її з іншими інструментами для вирішення завдань моніторингу шуму.

 
4 БІЗНЕС-КОНТЕКСТ
4.3	Робоче середовище
Обладнання IoT:
	шумові сенсори для збору даних;
	ESP32 для передачі інформації;
Програмне забезпечення:
	Серверна частина: Microsoft SQL Server для зберігання даних про показники сенсорів і журналів подій;
	API та логіка: ASP.NET Core для реалізації REST API та обробки даних;
	Комунікація: MQTT для передачі повідомлень між пристроями;
	Інтеграція та безпека: бібліотека BCrypt.Net для авторизації користувачів, Swagger UI для документування REST API.
Мови програмування:
	JS для серверної логіки та розробки IoT-програмного забезпечення (ESP32).
Вимоги до обладнання:
	сервер із мінімальними характеристиками: 2 ядра CPU, 4 ГБ RAM, 50 ГБ дискового простору;
	підтримка операційних систем: Windows Server 2019 або новіших версій.



Основні вимоги до продуктивності та функціональності:
	Цілісність даних: використання транзакцій MS SQL Server для забезпечення надійності даних сенсорів;
	Швидкодія: час реакції системи на перевищення норм шуму — до 1 секунди;
	Доступність: REST API для інтеграції з іншими системами.
Посилання на відео: https://youtu.be/t2Tk5naUeAA

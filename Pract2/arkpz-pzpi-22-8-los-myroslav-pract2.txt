Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Лось М.О.

Перевірив: 
викладач каф. ПІ 
Сокорчук І.П.



Харків 2024
 
1. Мета роботи: 
Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості. 
 
2.	Завдання 
Студент повинен обрати 3 метода рефакторингу з книги  Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів. 3). 
Кожен метод рефакторингу повинен супроводжуватись: 
Описом проблеми, яку вирішує даний метод. 
Кодом до і після застосування методу рефакторингу. 
Поясненням переваг використаного методу. 
 
3.	Хід роботи 
Було обрано 3 методи рефакторингу. У презентації (Додаток Б) наведено приклади свого особистого коду, який потребує покращення, та застосування обраних методів. 
 
Висновки 
У ході виконання практичної роботи було розглянуто три методи рефакторингу з книги Мартіна Роберта "Чистий код", що сприяли покращенню якості коду. Кожен метод було проілюстровано на практичних прикладах з власних проєктів, що допомогло краще усвідомити процес виявлення проблем у коді та правильне застосування відповідних підходів для їх усунення. Рефакторинг істотно підвищує зрозумілість, ефективність та зручність супроводу програмного коду.
Відео-презентація: https://youtu.be/w5gTgRPDmxg?feature=shared
 
 	  
ДОДАТОК А 
Програмний код, використаний як приклад у презентації. 
 
# Метод 1 – Self Encapsulate Field
package Employee;
sub new {
    my $class = shift;
    my $self = {
        _salary => shift,
    };
    bless $self, $class;
    return $self;
}
sub print_salary {
    my $self = shift;
    print "Зарплата: $self->{_salary}\n";
}
1;
# Після рефакторингу  
package Employee;
sub new {
    my $class = shift;
    my $self = {
        _salary => shift,
    };
    bless $self, $class;
    return $self;
}
sub set_salary {
    my ($self, $salary) = @_;
    $self->{_salary} = $salary;
}
sub get_salary {
    my $self = shift;
    return $self->{_salary};
}
sub print_salary {
    my $self = shift;
    print "Зарплата: " . $self->get_salary() . "\n";
}
1;
# Метод 2 – Change Bidirectional Association to Unidirectional 
package Customer;
sub new {
    my $class = shift;
    my $self = {
        _orders => [],
    };
    bless $self, $class;
    return $self;
}
sub add_order {
    my ($self, $order) = @_;
    push @{ $self->{_orders} }, $order;
    $order->{_customer} = $self;
}
1;
package Order;
sub new {
    my $class = shift;
    my $self = {
        _customer => undef,
    };
    bless $self, $class;
    return $self;
}
1;
# Після рефакторингу  
package Customer;
sub new {
    my $class = shift;
    my $self = {
        _orders => [],
    };
    bless $self, $class;
    return $self;
}
sub add_order {
    my ($self, $order) = @_;
    push @{ $self->{_orders} }, $order;
}
1;
package Order;
sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;
    return $self;
}
1;
# Метод 3 – Change Value to Reference
package Product;

sub new {
    my $class = shift;
    my $self = {
        _price => shift,
    };
    bless $self, $class;
    return $self;
}
sub get_price {
    my $self = shift;
    return $self->{_price};
}
1;
# Після рефакторингу  
package Product;
my %instances;  # Збереження посилань на існуючі об'єкти
sub new {
    my $class = shift;
    my $price = shift;
    # Перевіряємо, чи існує вже об'єкт з такою ціною
    if (exists $instances{$price}) {
        return $instances{$price};
    }
    my $self = {
        _price => $price,
    };
    bless $self, $class;
    $instances{$price} = $self;
    return $self;
}
sub set_price {
    my ($self, $price) = @_;
    $self->{_price} = $price;
}
sub get_price {
    my $self = shift;
    return $self->{_price};
}
1;


ДОДАТОК Б
Презентація на тему «Методи рефакторингу коду програмного забезпечення».

МЕТОДИ РЕФАКТОРИНГУ КОДУ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ
Виконав: Ст. Гр. ПЗПІ-22-8 Лось Мирослав

Методи рефакторингу:
Self Encapsulate Field
Change Bidirectional Association to Unidirectional
Change Value to Reference

Висновки
Методи рефакторингу, такі як Self Encapsulate Field, Change Bidirectional Association to Unidirectional та Change Value to Reference, допомагають покращити структуру коду, зменшити його складність та зробити його більш читабельним і підтримуваним. Вони дозволяють:

Оптимізувати код
Перенесення логіки доступу до полів у методи (Self Encapsulate Field) або зміна напрямку зв'язків між об'єктами (Change Bidirectional Association to Unidirectional) сприяє зменшенню дублювання коду та спрощує управління залежностями.

Полегшити підтримку та розширення
Зменшення кількості полів чи зв'язків дозволяє краще розподіляти відповідальність між класами, що сприяє легшому внесенню змін у майбутньому.

Підвищити інкапсуляцію
Реалізація доступу до властивостей через методи (наприклад, геттери й сеттери в Self Encapsulate Field та Change Value to Reference) забезпечує контроль над змінами даних, зберігаючи їхню цілісність.

Зробити код більш ефективним
Видалення зайвих залежностей (Change Bidirectional Association to Unidirectional) чи впровадження гнучкіших способів роботи з даними (Change Value to Reference) покращує продуктивність і масштабованість програми.

Загалом, ці методи дозволяють зберігати чистоту та модульність коду, що є критично важливим для довгострокової підтримки й розвитку програмних систем на Perl.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ:
Martin Fowler – "Refactoring: Improving the Design of Existing Code"
Refactoring Guru – https://refactoring.guru
Robert C. Martin – "Clean Code: A Handbook of Agile Software Craftsmanship"
Andrew Hunt & David Thomas – "The Pragmatic Programmer: Your Journey to Mastery"

Дякую за увагу!

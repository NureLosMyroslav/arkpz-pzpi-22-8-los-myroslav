МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Лабораторної роботи № 5
з дисципліни
«Аналіз та рефакторинг коду»


Виконав: 
ст. гр. ПЗПІ-22-8
Лось М.О.

Перевірив: 
ст. викладач каф. ПІ 
Сокорчук І.П.



Харків 2024



5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ

5.1	Мета роботи
Розгорнути програмну систему та продемонструвати її роботу.
5.2	Хід роботи
У ході виконання лабораторної роботи було розгорнуто програмну систему для моніторингу рівня шуму. Система включає IoT-клієнт, що зчитує показники шуму та передає їх через MQTT-брокер на серверну частину. 
Сервер отримує дані, обробляє їх та зберігає у базі даних MS SQL для подальшого аналізу.
Було виконано такі етапи роботи:
•	Налаштування підключення IoT-клієнта до мережі Wi-Fi та MQTT-брокера.
•	Реалізація збору даних із сенсорів та їх передача у форматі JSON.
•	Обробка отриманих даних на сервері та їх збереження у базі даних.
•	Розробка REST API для доступу до збережених даних через Swagger UI.
•	Тестування коректності роботи всіх компонентів.

5.2.1	Вимоги середовища та компоненти
Вимоги до середовища:
1.	Операційна система: Windows 10/11, macOS або Linux (Ubuntu, Debian тощо).
2.	Node.js: Версія 16.x або вище – використовується для запуску серверного коду.
3.	MS SQL Server: Використовується як база даних для збереження інформації про рівень шуму.
4.	MQTT Broker: Публічний MQTT-брокер broker.hivemq.com для обміну повідомленнями.
5.	Інтернет-з'єднання: Необхідне для взаємодії IoT-пристрою з сервером через MQTT.
5.2.2	Компоненти проєкту
1.	Backend (Node.js + Express.js):
•	Express.js: Фреймворк для створення REST API.
•	Swagger: Для інтерактивної документації API.
•	MQTT.js: Для підключення до MQTT-брокера та отримання повідомлень.
•	mssql (MS SQL Client): Для взаємодії з базою даних MS SQL.
2.  База даних (MS SQL):
Таблиці:
•	Users: Інформація про користувачів.
•	HealthMetrics: Зберігає показники шуму, пульсу, кількості кроків.
•	Notifications: Сповіщення про перевищення рівня шуму.
3.  IoT-пристрій (ESP32):
•	Wi-Fi: Для підключення до мережі.
•	Датчик шуму: Для вимірювання рівня звуку.
•	MQTT Client: Для відправки даних на сервер.
4.  Документація API (Swagger):
•	Swagger UI: Для візуалізації та тестування API.
•	Swagger JSDoc: Генерація документації на основі коментарів у коді.


5.3	Висновки
У ході лабораторної роботи було успішно розгорнуто програмну систему для моніторингу шуму на базі IoT-пристрою ESP32. Дані сенсорів передавалися через MQTT-брокер до серверної частини, де вони оброблялись і зберігались у базі даних MS SQL. Розроблені UML-діаграми дозволили ефективно моделювати взаємодію компонентів системи та забезпечити наочне розуміння її роботи.
Система продемонструвала стабільну та надійну роботу: дані датчика коректно вимірювались, формувались у форматі JSON і публікувались у MQTT-топік. Сервер успішно приймав, обробляв та зберігав дані датчика, забезпечуючи можливість подальшого аналізу історичних показників. Завдяки використанню MQTT було досягнуто високу швидкість передачі даних та їхню ефективну маршрутизацію навіть у разі великого навантаження на систему.
Окрім того, проведене тестування підтвердило коректність роботи всіх компонентів системи, включаючи підключення IoT-клієнта до мережі, взаємодію з MQTT-брокером, обробку отриманих повідомлень і запис до бази даних. Налаштований серверний API на базі Node.js дозволяє зручно отримувати збережені дані через Swagger UI та взаємодіяти з іншими сервісами.
Додатковою перевагою є масштабованість розробленого рішення. У майбутньому система може бути розширена шляхом інтеграції нових типів сенсорів для збору додаткової інформації, наприклад, моніторингу температури, вологості або забруднення повітря. Це дозволить створити комплексний IoT-сервіс для міського середовища, що допоможе покращити якість життя громадян.
Таким чином, результати виконаної лабораторної роботи підтверджують ефективність реалізованої системи, яка може бути використана у реальних умовах для контролю рівня шуму у міських районах. Подальший розвиток та оптимізація дозволять підвищити функціональність системи, забезпечивши більш детальний аналіз отриманих даних і впровадження механізмів автоматичного реагування на перевищення допустимих рівнів шуму.

Посилання на відео: https://youtu.be/Ty8TqzfqAmg

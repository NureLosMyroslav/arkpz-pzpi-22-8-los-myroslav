Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Лось.М.О

Перевірив: 
викладач кат. ПІ 
Сокорчук І.П.



Харків 2024



1. Мета роботи: 
Ознайомитися з рефакторінгом коду на обраній мові програмування. 
Набути навичок з рефакторінгу коду для покращення якості. 
 
2.	Завдання 
Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду. 
 
3.	Хід роботи 
Було обрано мову програмування Perl. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду (Додаток А) до і після застосування цих рекомендацій. 
 
Висновки 
У ході виконання практичної роботи було вивчено основні рекомендації та практики написання чистого, зрозумілого й підтримуваного коду на мові Perl. Детально розглянуто принципи читабельності, правильного іменування змінних та функцій, організації коду, а також застосування інструментів для перевірки та тестування.
Проаналізовано основні сильні сторони мови, її сфери застосування та виклики, що можуть виникати при використанні Perl у сучасному розробницькому середовищі. Особливу увагу приділено використанню модулів CPAN, а також інструментам для аналізу та профілювання коду, що допомагають уникати помилок і покращувати продуктивність.

Відео-презентація: https://youtu.be/Q5kyZq-mOb8?feature=shared

ДОДАТОК А 
Поганий приклад
sub f {
    my ($x, $y) = @_;
    return $x * $y;
}

Гарний приклад
sub multiply_numbers {
    my ($first_number, $second_number) = @_;
    return $first_number * $second_number;
}

Поганий приклад
my $total_price = $item_price + ($item_price * 0.2);

Гарний приклад
use constant TAX_RATE => 0.2;
my $total_price = $item_price + ($item_price * TAX_RATE);

Поганий приклад
$var = "Hello";  # Змінна не була оголошена
print $Var;      # Помилка у назві змінної

Гарний приклад
use strict;
use warnings;
my $var = "Hello";  
print $var;

Використовуйте strict і warnings
use strict;
use warnings;

Правильний код
use strict;
use warnings;
my %user_info = ( name => "Miroslav", age => 19, );
foreach my $key (keys %user_info) { print "$key: $user_info{$key}\n";
}

Неправильний код
$user_info{name} = "Miroslav";
$user_info{age} = 19;
print "$user_info{name}, $user_info{age}\n";

Відкриття та читання файлів
open(my $fh, '<', 'file.txt') or die "Не вдалося відкрити файл: $!";
while (my $line = <$fh>) {
print $line;
}
close($fh);

Запис у файл
open(my $fh, '>', 'output.txt') or die "Не вдалося створити файл: $!"; print $fh "Hello, World!\n";
close($fh);

Парсинг CSV-файлу
use Text::CSV;
my $csv Text::CSV->new({ binary => 1 });
open my $fh, "<", "data.csv" or die "Не вдалося відкрити файл: $!";
while (my $row = $csv->getline($fh)) {
print join(", ", @$row), "\n";
}
close $fh;

ДОДАТОК Б 
Презентація на тему «Основні рекомендації для ефективного написання коду на Perl».

ОСНОВНІ РЕКОМЕНДАЦІЇ НАПИСАННЯ КОДУ  
Для мови програмування Perl  

Виконав ст. гр. ПЗПІ-22-8 Лось Мирослав  

Вступ: Особливості мови Perl  
Perl — високорівнева мова програмування, орієнтована на обробку тексту, автоматизацію завдань і швидку розробку скриптів. Вона була створена для спрощення складних операцій із текстовими даними.  

Основні особливості мови:  
Потужна підтримка регулярних виразів  
Гнучкість та адаптивність для різноманітних завдань  
Використовується у веб-розробці, адмініструванні систем та аналізі даних  

Історія мови Perl  
1987 рік — створення мови (автор: Ларрі Волл)  
Основна ідея — обробка тексту та автоматизація задач  
Сучасні версії: Perl 5, Perl 6 (Raku)  

Основні принципи написання коду на Perl  
Читабельність — зрозумілі імена змінних та функцій  
Коментарі — пояснення складних ділянок коду  
Дотримання стилю — структурований формат, відступи  

Рекомендація 1: Використовуйте осмислені імена змінних та функцій  
Опис: Чіткі та логічні назви допомагають зробити код зрозумілішим.  

Чому це важливо?  
Покращує читабельність  
Полегшує підтримку коду  

Рекомендація 2: Уникайте "магічних чисел" (Magic Numbers)  
Опис: Використовуйте константи замість чисел у коді.  

Чому це важливо?  
Підвищує зрозумілість  
Полегшує оновлення коду  

Ключові модулі та бібліотеки  
CPAN — архів бібліотек Perl  
DBI — робота з базами даних  
LWP — взаємодія з HTTP  

Рекомендація 3: Використовуйте строгий режим і попередження  
Опис: strict і warnings допомагають уникати поширених помилок.  

Чому це важливо?  
Попереджає про потенційні помилки  
Робить код надійнішим  

Рекомендації для ефективного кодування  
Використовуйте strict і warnings  
Дотримуйтеся DRY-принципу (*Don't Repeat Yourself*)  
Раціонально використовуйте масиви та хеші  

Інструменти для перевірки коду  
Perl::Critic — аналізатор відповідності стилю  
Test::More — модуль для тестування  
Devel::NYTProf — профілювання продуктивності  

Сфери застосування Perl  
Адміністрування систем — автоматизація задач  
Обробка тексту — аналіз журналів, модифікація файлів  
Веб-розробка — інтеграція серверних додатків  
Обробка даних — парсинг файлів, робота з форматами  

Сильні сторони Perl  
Гнучкість у стилі програмування  
Великий вибір бібліотек  
Підтримка регулярних виразів  

Недоліки та виклики  
Складність читання коду без дотримання стилю  
Обмежена підтримка ООП у Perl 5  
Менша популярність у сучасному розробницькому середовищі  

Майбутнє Perl  
Розвиток Perl 7  
Покращення CPAN та продуктивності  
Розширення спільноти  

Порівняння Perl з іншими мовами  
Python — сучасніший синтаксис, слабша підтримка регулярних виразів  
Ruby — схожа гнучкість, менший акцент на текстову обробку  
PHP — більше для вебу, менш універсальний для обробки тексту  

Висновки  
Дотримання рекомендацій щодо написання коду забезпечує:  
Зручність підтримки програмного забезпечення  
Скорочення часу на виправлення помилок  
Полегшення командної роботи  
Розширення можливостей використання Perl у різних сферах  

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ  
Perl Programming Documentation – [https://perldoc.perl.org](https://perldoc.perl.org)  
CPAN (Comprehensive Perl Archive Network) – [https://www.cpan.org](https://www.cpan.org)  
Modern Perl by chromatic – [https://modernperlbooks.com](https://modernperlbooks.com)  
Learning Perl (O’Reilly) – [https://www.learning-perl.com](https://www.learning-perl.com)  
Perl Best Practices – [https://www.oreilly.com/library/view/perl-best-practices](https://www.oreilly.com/library/view/perl-best-practices)  
Test:More Documentation – [https://perldoc.perl.org/Test/More.html](https://perldoc.perl.org/Test/More.html)  



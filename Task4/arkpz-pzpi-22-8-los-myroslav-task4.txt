МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Лабораторної роботи № 4
з дисципліни
«Аналіз та рефакторинг коду»


Виконав: 
ст. гр. ПЗПІ-22-8
Лось М.О.

Перевірив: 
ст. викладач каф. ПІ 
Сокорчук І.П.



Харків 2024



4 РОЗРОБКА IoT КЛІЄНТА (БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)

4.1	Мета роботи
Потрібно створити програмну систему для IoT-рішення, що взаємодіє із сервером через протокол MQTT та зберігає дані у базі даних MS SQL. Використано сучасні платформи та технології, що забезпечують ефективну взаємодію між пристроями та сервером.
4.2	Хід роботи
У межах проєкту було створено IoT-систему для моніторингу рівня шуму в міських зонах. Основні компоненти включають клієнтську частину, що зчитує показники сенсорів шуму та передає їх на сервер через протокол MQTT. Серверна частина на Node.js отримує ці дані, зберігає їх у базі даних MS SQL та здійснює аналіз.
4.2.1	Опис інженерних рішень
Система працює на основі IoT-пристроїв, що передають дані про рівень шуму через MQTT. Серверна частина побудована на Node.js із використанням Express.js для обробки API-запитів. Дані зберігаються у базі MS SQL, що забезпечує стабільність і можливість аналізу історичних показників.
Передача даних реалізована через MQTT, що забезпечує надійність і швидкість обміну інформацією. База даних містить структуру таблиць для збереження показників шуму, а API дозволяє отримувати та аналізувати ці дані.

Рисунок 4.1 - Схема ІоТ пристрою програмної системи
4.2.2	Фрагменти програмного коду
//MQTT-клієнт для отримання даних від сенсорів
const mqtt = require('mqtt');
const sql = require('./db');

const mqttBroker = 'mqtt://broker.hivemq.com';
const topic = 'iot/noiseSensor';

const mqttClient = mqtt.connect(mqttBroker);

mqttClient.on('connect', () => {
    console.log('Підключено до MQTT-брокера');
    mqttClient.subscribe(topic, (err) => {
        if (!err) {
            console.log(`Підписано на топік: ${topic}`);
        }
    });
});

mqttClient.on('message', (topic, message) => {
    const data = JSON.parse(message.toString());
    console.log('Отримано дані:', data);
    
    const query = `INSERT INTO HealthMetrics (HeartRate, Steps, CaloriesBurned) VALUES (${data.heartRate}, ${data.steps}, ${data.caloriesBurned})`;
    sql.query(query, (err) => {
        if (err) console.error('Помилка запису в базу:', err.message);
    });
});

//Підключення до бази даних
const sql = require('mssql');
require('dotenv').config();

const config = {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
    server: process.env.DB_SERVER,
    port: parseInt(process.env.DB_PORT, 10) || 1433,
    options: {
        encrypt: false,
        enableArithAbort: true,
        trustServerCertificate: true
    }
};

sql.connect(config).then(() => {
    console.log('Підключено до бази даних');
}).catch(err => {
    console.error('Помилка підключення:', err.message);
});

Таким чином, було реалізовано IoT-рішення для моніторингу шуму, що включає передачу, обробку та збереження даних, а також API для доступу до збережених показників.


4.2.3 Створити UML діаграма прецедентів ІоТ клієнта.

 
Рисунок 4.2 - UML діаграма прецедентів ІоТ клієнта


4.2.4	Створити UML діаграму діяльності ІоТ клієнта.


 
Рисунок 4.3 - UML діаграма діяльності ІоТ клієнта.



4.4	Висновки

У ході лабораторної роботи було створено IoT-систему для моніторингу рівня шуму, яка використовує MQTT-протокол для передачі даних і базу даних MS SQL для їх збереження. Розроблено UML-діаграми для моделювання взаємодії компонентів системи, що дозволяє візуалізувати структуру та принципи роботи всіх її елементів.
Система ефективно збирає дані сенсорів, передає їх на сервер та зберігає у базі для подальшого аналізу. Використання технології MQTT забезпечує швидку та надійну передачу даних навіть у випадку нестабільного з'єднання. База даних MS SQL надає можливості для довготривалого збереження отриманої інформації, що дозволяє аналізувати історичні тенденції та знаходити аномалії в рівнях шуму.
Під час тестування було перевірено роботу всіх компонентів, зокрема підключення IoT-клієнта до мережі, взаємодію з MQTT-брокером, коректність обробки та збереження даних у базі. Результати тестування показали стабільність і коректність функціонування системи.
Розроблене рішення є гнучким і може бути адаптоване для інших сценаріїв використання, наприклад, моніторингу рівня шуму в різних міських зонах або виробничих приміщеннях. Додаткові можливості, такі як інтеграція з мобільними додатками чи системами автоматизованого оповіщення, можуть значно розширити функціонал та практичну користь даного рішення. 
Таким чином, створена IoT-система є ефективним інструментом для моніторингу акустичного середовища, що може бути використане для покращення якості життя у міських районах шляхом виявлення та усунення джерел надмірного шуму.

Посилання на відео: https://youtu.be/x6hvV8eqb5k
